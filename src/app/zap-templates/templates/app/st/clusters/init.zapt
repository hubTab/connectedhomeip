{{> header}}
-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

{{#chip_server_clusters}}
--- @field public {{asUpperCamelCase name}} st.matter.generated.zap_clusters.{{asUpperCamelCase name}}
{{/chip_server_clusters}}
local zap_clusters = {}

{{!--
{{#all_user_clusters}}
{{#all_user_cluster_commands}}
{{#if (isStrEqual clusterName parent.name)}}
{{#if (isCommandAvailable parent.side incoming outcoming)}}
{{#if (zcl_command_arguments_count this.id)}}
Cluster Name : {{asCamelCased parent.name false}}+Command Name : {{asCamelCased name
false}}+{{#zcl_command_arguments}}Type Name : {{asUnderlyingType type}}+Argument Name : {{asSymbol label}}{{#unless
(isLastElement index count)}},{{/unless}}{{/zcl_command_arguments}}
{{else}}
Cluster Name : {{asCamelCased parent.name false}}+Command Name : {{asCamelCased name false}}
{{/if}}
{{/if}}
{{/if}}
{{/all_user_cluster_commands}}
{{/all_user_clusters}}
--}}
{{#chip_server_clusters}}
zap_clusters.{{asUnderscoreLowercase name}}_id = {{asHex code 4}}
{{/chip_server_clusters}}

zap_clusters.cluster_cache = {}

zap_clusters.id_to_name_map = {
{{#chip_server_clusters}}
  [zap_clusters.{{asUnderscoreLowercase name}}_id] = "{{asUpperCamelCase name}}",
{{/chip_server_clusters}}
}

local zap_clusters_mt = {}
zap_clusters_mt.__cluster_cache = {}
zap_clusters_mt.__index = function(self, key)
if zap_clusters_mt.__cluster_cache[key] == nil then
local req_loq = string.format("st.matter.generated.zap_clusters.%s.init", key)
zap_clusters_mt.__cluster_cache[key] = require(req_loq)
end
return zap_clusters_mt.__cluster_cache[key]
end
setmetatable(zap_clusters, zap_clusters_mt)

zap_clusters.get_cluster_from_id = function(id)
local cluster_name = zap_clusters.id_to_name_map[id]
if cluster_name ~= nil then
return zap_clusters[cluster_name]
end
return nil
end

return zap_clusters