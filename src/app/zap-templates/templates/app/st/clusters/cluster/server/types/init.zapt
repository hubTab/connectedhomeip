{{> header}}
{{#chip_server_clusters}}
==============================================================================================================================================================
SOURCE_FILE_PATH="st/matter/generated/zap_clusters/{{asUpperCamelCase name}}/types/init.lua"
==============================================================================================================================================================
{{!-- #if (isStrEqual name "On/Off") --}}
-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

local types_mt = {}
types_mt.__types_cache = {}
types_mt.__index = function(self, key)
  if types_mt.__types_cache[key] == nil then
    local req_loc = string.format("st.matter.generated.zap_clusters.{{asUpperCamelCase name}}.types.%s", key)
    local cluster_type = require(req_loc)
    types_mt.__types_cache[key] = cluster_type
  end
  return types_mt.__types_cache[key]
end

--- @class st.matter.generated.zap_clusters.{{asUpperCamelCase name}}Types
---
{{#zcl_enums}}
{{#unless (isStrEqual label "Status")}}
{{#unless (isStrEqual label "ReportingDirection")}}
{{#if (isWeaklyTypedEnum label)}}
--- @field public {{asUpperCamelCase name}} st.matter.generated.zap_clusters.{{asUpperCamelCase ../name}}.types.{{asUpperCamelCase name}}
{{#zcl_enum_items}}
{{/zcl_enum_items}}
{{/if}}
{{/unless}}
{{/unless}}
{{/zcl_enums}}

{{#zcl_bitmaps}}
--- @field public {{asUpperCamelCase name}} st.matter.generated.zap_clusters.{{asUpperCamelCase ../name}}.types.{{asUpperCamelCase name}}
{{#zcl_bitmap_items}}
{{/zcl_bitmap_items}}
{{/zcl_bitmaps}}

local  {{asUpperCamelCase name}}Types = {}

setmetatable({{asUpperCamelCase name}}Types, types_mt)

return {{asUpperCamelCase name}}Types

{{!-- /if --}}  
{{/chip_server_clusters}}
