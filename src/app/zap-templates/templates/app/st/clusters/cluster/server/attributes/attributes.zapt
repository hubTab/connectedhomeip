{{> header}}
{{#chip_server_clusters}}
{{#if (isStrEqual name "On/Off")}}
-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

{{#zcl_attributes_server}}
{{#if (isStrEqual name "ClusterRevision")}}
{{else if (isStrEqual name "ServerGeneratedCommandList")}}
{{else if (isStrEqual name "ClientGeneratedCommandList")}}
{{else if (isStrEqual name "AttributeList")}}
{{else if (isStrEqual name "FeatureMap")}}
{{else}}
===============================================================================
local cluster_base = require "st.matter.cluster_base"
local {{type}} = require "st.matter.data_types.{{type}}"

--- @class st.matter.generated.zap_clusters.{{../name}}.{{name}}
--- @alias {{name}}
---
--- @field public ID number {{asHex code 4}} the ID of this attribute
--- @field public NAME string "{{name}}" the name of this attribute
--- @field public data_type st.matter.data_types.{{type}} the data type of this attribute
local {{name}} = {
  ID = {{asHex code 4}},
  NAME = "{{name}}",
  base_type = {{type}},
}

--- Add additional functionality to the base type object
function {{name}}:augment_type(base_type_obj)
  if base_type_obj.NAME ~= self.base_type.NAME then
    setmetatable(base_type_obj, getmetatable(self.base_type))
  end
  base_type_obj.field_name = self.NAME
end

function {{name}}.pretty_print(value_obj)
  {{name}}.base_type.pretty_print(value_obj)
end

--- TODO
{{name}}.build_test_attr_report = cluster_base.build_test_attr_report

--- TODO
{{name}}.build_test_read_attr_response = cluster_base.build_test_read_attr_response

--- Create a {{type}} object of this attribute with any additional features provided for the attribute
--- This is also usable with the {{name}}(...) syntax
---
--- @vararg vararg the values needed to construct a {{type}}
--- @return st.matter.data_types.{{type}}
function {{name}}:new_value(...)
  local o = self.base_type(table.unpack({...}))
  self:augment_type(o)
  return o
end

--- Constructs an st.matter.interaction_model.InteractionRequest to read
--- this attribute from a device
--- @param device st.matter.Device
--- @return st.matter.interaction_model.InteractionRequest containing an Interaction Request
function {{name}}:read(device, endpoint_id)

  return cluster_base.read(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    nil, --event_id
    nil, --list_index
    nil --field_id
  )

end

{{#if isWritable}}
--- Constructs an st.matter.interaction_model.InteractionRequest to write
--- this attribute to a device
---
--- @param device st.matter.Device
--- @param value st.matter.data_types.{{type}} the value to write
function {{name}}:write(device, endpoint_id, value)
  local data = data_types.validate_or_build_type(value, self.base_type)
  self:augment_type(data)
  return cluster_base.write(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    nil, --event_id
    nil, --list_index
    nil, --field_id
    data
  )

end
{{/if}}

--- Reporting policy: {{name}} => {{isReportable}} => {{reportingPolicy}}

{{#if isReportable}}
--- Sets up a Subscribe Interaction, by settig up a Reporting Interval
---
--- @param device any
--- @param min_interval_floor any
--- @param max_interval_floor any
--- @return any
function {{name}}:subscribe(device, min_interval_floor, max_interval_floor)
    -- TODO
end
{{/if}}

function {{name}}:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable({{name}}, {__call = {{name}}.new_value})
return {{name}}

{{/if}}
{{/zcl_attributes_server}}


{{/if}}  
{{/chip_server_clusters}}