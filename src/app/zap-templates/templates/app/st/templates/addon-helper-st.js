//
// St Matter Lua Library Standard Header
//
function lua_zap_header() {
  return `-- This file is generated by ZCL Advanced Platform generator. Please don't edit manually.`;
}

// 
// Maps Matter type to st.matter.data_types
//
function asSTDataType(type) {
  switch (type) {
    case 'boolean':
      return 'Boolean'
    case 'bitmap16':
    case 'BITMAP16':
      return 'Uint16'
    case 'int8u':
      return 'Uint8'
    case 'int8s':
      return 'Int8'
    case 'int16u':
      return 'Uint16'
    case 'int16s':
      return 'Int16'
    case 'int32u':
      return 'Uint32'
    case 'int32s':
      return 'Int32'
    case 'int64u':
      return 'Uint64'
    case 'int64s':
      return 'Int64'
    case 'bitmap8':
    case 'BITMAP8':
      return 'Uint8'
    case 'enum8':
      return 'Uint8'
    case 'enum16':
      return 'Uint16'
    case 'enum32':
      return 'Uint32'
    default:
      return type
  }
}

// 
// Maps Matter type to st.matter.data_types and returns the appropriate length
//
function asSTDataTypeLength(type) {
  switch (type) {
    case 'boolean':
      return 1
    case 'bitmap16':
    case 'BITMAP16':
      return 2
    case 'int8u':
      return 1
    case 'int8s':
      return 1
    case 'int16u':
      return 2
    case 'int16s':
      return 2
    case 'int32u':
      return 4
    case 'int32s':
      return 4
    case 'int64u':
      return 8
    case 'int64s':
      return 8
    case 'bitmap8':
    case 'BITMAP8':
      return 1
    case 'enum8':
      return 1
    case 'enum16':
      return 2
    case 'enum32':
      return 2
    default:
      return 1
  }
}

//
// Lua friendly variable formatter
//
function as_underscore_uppercase_lua(str) {

  let label = str
  // console.log("MYLABEL 4: " + label)
  if (label.match(/^\d/)) { // cannot start with digit
    label = "_" + label
  }
  // console.log("MYLABEL 5: " + label)
  label = label.replace(".", "_") // cannot have .
  // console.log("MYLABEL 6: " + label)

  return label
}

exports.asSTDataType = asSTDataType
exports.asSTDataTypeLength = asSTDataTypeLength
exports.lua_zap_header = lua_zap_header
exports.as_underscore_uppercase_lua = as_underscore_uppercase_lua