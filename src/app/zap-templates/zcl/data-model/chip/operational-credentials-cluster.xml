<?xml version="1.0"?>
<!--
Copyright (c) 2021 Project CHIP Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<configurator>
  <domain name="CHIP"/>

  <struct name="FabricDescriptor">
    <cluster code="0x003E"/>
    <item name="FabricIndex" type="INT8U"/>
    <item name="RootPublicKey" type="OCTET_STRING" length="65"/>
    <item name="VendorId" type="INT16U"/> <!-- Change INT16U to new type VendorID #2395 -->
    <item name="FabricId" type="FABRIC_ID"/>
    <item name="NodeId" type="NODE_ID"/>
    <item name="Label" type="CHAR_STRING" length="32"/>
  </struct>

  <enum name="NodeOperationalCertStatus" type="ENUM8">
    <cluster code="0x003E"/>
    <item name="SUCCESS" value="0x00"/>
    <item name="InvalidPublicKey" value="0x01"/>
    <item name="InvalidNodeOpId" value="0x02"/>
    <item name="InvalidNOC" value="0x03"/>
    <item name="MissingCsr" value="0x04"/>
    <item name="TableFull" value="0x05"/>
    <item name="InsufficientPrivilege" value="0x08"/>
    <item name="FabricConflict" value="0x09"/>
    <item name="LabelConflict" value="0x0a"/>
    <item name="InvalidFabricIndex" value="0x0b"/>
  </enum>

  <struct name="NOCStruct">
    <cluster code="0x003E"/>
    <item name="FabricIndex" type="INT8U"/>
    <item name="NOC" type="OCTET_STRING"/>
  </struct>

  <cluster>
    <domain>General</domain>
    <name>Operational Credentials</name>
    <code>0x003E</code>
    <define>OPERATIONAL_CREDENTIALS_CLUSTER</define>
    <description>This cluster is used to add or remove Operational Credentials on a Commissionee or Node, as well as manage the associated Fabrics.</description>

    <!--
      General Notes regarding this proposed design:

        (1) OperationalCredentialCluster.adoc has been used to provide the definitions for attributes and commands, includig the access control definitions.
        
        (2) Some of the attributes were either completely added, or updated in this cluster, and some were missing or having incorrect elements.
        Did so to help focus on the <access> elements for each of them, as for accuracy while presenting this proposed design.



    -->

    <!--
      Definition (OperationalCredentialCluster.adoc):
      | Id | Name                | Type                                      | Constraint            | Quality | Default | Access | Conformance
      | 0  | NOCs                | <<list-def>>[<<ref_NOCStruct,NOCStruct>>] | max SupportedFabrics  | N       |         | R A F  | M

      <access/> Design Rationale:
        Per Definition:
          Operation:        R(ead) only. I.e. Write is inferred as not allowed.
          Role/Privilege:   A(dminister)
          Modifier:         F(abric-scoped)

      Other notes:
        Newly added attribute, as per the spec, as it was not included.
    -->
    <attribute side="server" code="0x0000" define="NOCs" type="ARRAY" entryType="NOCStruct" length="320" writable="false" optional="false">
      <description>NOCs</description>
      <access op="read" privilege="administer" modifier="fabric-scoped"/>
    </attribute>

    <!--     
      Definition (OperationalCredentialCluster.adoc):
      | Id | Name                | Type                                      | Constraint            | Quality | Default | Access | Conformance
      | 1  | Fabrics             | <<list-def>>[FabricDescriptorStruct]      | max SupportedFabrics  | N       |         | R V F  | M

      <access/> Design Rationale:
        Per Definition:
          Operation:        R(ead) only. I.e. Write is inferred as not allowed.
          Role/Privilege:   V(iew)
          Modifier:         F(abric-scoped)

      Other notes:
        Updated attribute description, as per the spec.
    -->
    <attribute side="server" code="0x0001" define="FABRICS" type="ARRAY" entryType="FabricDescriptor" length="320" writable="false" optional="false">
      <description>Fabrics</description>
      <access op="read" privilege="view" modifier="fabric-scoped"/>
    </attribute>

    <!--     
      Definition:
      | Id | Name                | Type                                      | Constraint            | Quality | Default | Access | Conformance
      | 2  | SupportedFabrics    | uint8                                     | 5 to 255              | F       |         | R V    | M

      <access/> Design Rationale:
        Per Definition:
          Operation:        R(ead) only. I.e. Write is inferred as not allowed.
          Role/Privilege:   V(iew)
          Modifier:         None
    -->    
    <attribute side="server" code="0x0002" define="SUPPORTED_FABRICS" type="INT8U" writable="false" optional="false">
      <description>SupportedFabrics</description>
      <access op="read" privilege="view"/>
    </attribute>

    <!--     
      Definition:
      | Id | Name                | Type                                      | Constraint            | Quality | Default | Access | Conformance
      | 3  | CommissionedFabrics | uint8                                     | max SupportedFabrics  | N       |         | R V    | M

      <access/> Design Rationale:
        Per Definition:
          Operation:        R(ead) only. I.e. Write is inferred as not allowed.
          Role/Privilege:   V(iew)
          Modifier:         None
    -->    
    <attribute side="server" code="0x0003" define="COMMISSIONED_FABRICS" type="INT8U" writable="false" optional="false">
      <description>CommissionedFabrics</description>
      <access op="read" privilege="view"/>
    </attribute>

    <!--     
      Definition:
      | Id | Name                | Type                                      | Constraint            | Quality | Default | Access | Conformance
      | 4  | TrustedRootCertificates  | <<list-def>>[<<octstr-def>>]         | max SupportedFabrics  | N       |         | R V    | M

      <access/> Design Rationale:
        Per Definition:
          Operation:        R(ead) only. I.e. Write is inferred as not allowed.
          Role/Privilege:   V(iew)
          Modifier:         None
    -->    
    <!-- 400 = 400 bytes for root cert -->
    <attribute side="server" code="0x0004" define="TRUSTED_ROOTS" type="ARRAY" entryType="OCTET_STRING" length="400" writable="false" optional="false">
      <description>TrustedRootCertificates</description>
      <access op="read" privilege="view"/>
    </attribute>

    <!--     
      Definition:
      | Id | Name                | Type                                      | Constraint            | Quality | Default | Access | Conformance
      | 5  | CurrentFabricIndex  | uint8                                     |                       |         | 0       | R V    | M

      <access/> Design Rationale:
        Per Definition:
          Operation:        R(ead) only. I.e. Write is inferred as not allowed.
          Role/Privilege:   V(iew)
          Modifier:         None
    -->    
    <attribute side="server" code="0x0005" define="CURRENT_FABRIC_INDEX" type="fabric_idx" writable="false" optional="false">
      <description>CurrentFabricIndex</description>
      <access op="read" privilege="view"/>
    </attribute>





    <!--     
      Since all Commands for the Operational Credential Cluster have the same access,
      the definition is listed only once.
      
      Definition (OperationalCredentialCluster.adoc):
      | 0  | AttestationRequest           | Client => Server | AttestationResponse       | A      | M
      | 1  | AttestationResponse          | Server => Client | N                         | A      | M
      | 2  | CertificateChainRequest      | Client => Server | CertificateChainResponse  | A      | M
      | 3  | CertificateChainResponse     | Server => Client | N                         | A      | M
      | 4  | CSRRequest                   | Client => Server | CSRResponse               | A      | M
      | 5  | CSRResponse                  | Server => Client | N                         | A      | M
      | 6  | AddNOC                       | Client => Server | NOCResponse               | A      | M
      | 7  | UpdateNOC                    | Client => Server | NOCResponse               | A      | M
      | 8  | NOCResponse                  | Server => Client | N                         | A      | M
      | 9  | UpdateFabricLabel            | Client => Server | NOCResponse               | A      | M
      | 10 | RemoveFabric                 | Client => Server | NOCResponse               | A      | M
      | 11 | AddTrustedRootCertificate    | Client => Server | Y                         | A      | M
      | 12 | RemoveTrustedRootCertificate | Client => Server | Y                         | A      | M

      <access/> Design Rationale:
        Per Definition:
          Operation:        Invoke (by default)
          Role/Privilege:   A(dminister)
          Modifier:         None
    -->
    <command source="client" code="0x00" name="AttestationRequest" optional="false">
      <description>Sender is requesting attestation information from the receiver.</description>
      <arg name="AttestationNonce" type="OCTET_STRING"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="server" code="0x01" name="AttestationResponse" optional="false">
      <description>An attestation information confirmation from the server.</description>
      <arg name="AttestationElements" type="OCTET_STRING"/>
      <arg name="Signature" type="OCTET_STRING"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="client" code="0x02" name="CertificateChainRequest" optional="false">
      <description>Sender is requesting a device attestation certificate from the receiver.</description>
      <arg name="CertificateType" type="INT8U"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="server" code="0x03" name="CertificateChainResponse" optional="false">
      <description>A device attestation certificate (DAC) or product attestation intermediate (PAI) certificate from the server.</description>
      <arg name="Certificate" type="OCTET_STRING"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="client" code="0x04" name="OpCSRRequest" optional="false">
      <description>Sender is requesting a certificate signing request (CSR) from the receiver.</description>
      <arg name="CSRNonce" type="OCTET_STRING"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <!-- TODO: Fix to match chip-spec:#3346 -->
    <command source="server" code="0x05" name="OpCSRResponse" optional="false">
      <description>A certificate signing request (CSR) from the server.</description>
      <arg name="NOCSRElements" type="OCTET_STRING"/>
      <arg name="AttestationSignature" type="OCTET_STRING"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="client" code="0x06" name="AddNOC" response="NOCResponse" optional="false">
      <description>Sender is requesting to add the new node operational certificates.</description>
      <arg name="NOCValue" type="OCTET_STRING"/>
      <arg name="ICACValue" type="OCTET_STRING" optional="true"/>
      <arg name="IPKValue" type="OCTET_STRING"/>
      <arg name="CaseAdminNode" type="NODE_ID"/>
      <arg name="AdminVendorId" type="INT16U"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="client" code="0x07" name="UpdateNOC" response="NOCResponse" optional="false">
      <description>Sender is requesting to update the node operational certificates.</description>
      <arg name="NOCValue" type="OCTET_STRING"/>
      <arg name="ICACValue" type="OCTET_STRING" optional="true"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="server" code="0x08" name="NOCResponse" optional="false">
      <description>Response to AddNOC or UpdateNOC commands.</description>
      <arg name="StatusCode" type="INT8U"/>
      <arg name="FabricIndex" type="INT8U"/>
      <arg name="DebugText" type="CHAR_STRING"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="client" code="0x09" name="UpdateFabricLabel" response="NOCResponse" optional="false">
      <description>This command SHALL be used by an Administrative Node to set the user-visible Label field for a given Fabric, as reflected by entries in the Fabrics attribute.</description>
      <arg name="Label" type="CHAR_STRING" length="32"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="client" code="0x0a" name="RemoveFabric" response="NOCResponse" optional="false">
      <description>This command is used by Administrative Nodes to remove a given fabric index and delete all associated fabric-scoped data.</description>
      <arg name="FabricIndex" type="INT8U"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="client" code="0x0b" name="AddTrustedRootCertificate" optional="false">
      <description>This command SHALL add a Trusted Root CA Certificate, provided as its CHIP Certificate representation.</description>
      <arg name="RootCertificate" type="OCTET_STRING"/>
      <access op="invoke" privilege="administer"/>
    </command>

    <command source="client" code="0x0c" name="RemoveTrustedRootCertificate" optional="false">
      <description>This command SHALL remove a Trusted Root CA Certificate, provided as its CHIP Certificate representation.</description>
      <arg name="TrustedRootIdentifier" type="OCTET_STRING"/>
      <access op="invoke" privilege="administer"/>
    </command>

  </cluster>
</configurator>
