{{!-- > header --}}
{{#chip_server_clusters}}
{{#zcl_bitmaps}}
SOURCE_FILE_PATH=st/matter/generated/zap_clusters/{{asUpperCamelCase ../name}}/types/{{asUpperCamelCase name}}.lua
-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

{{lua_zap_header}}

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.generated.zap_clusters.{{asUpperCamelCase ../name}}.types.{{asUpperCamelCase name}}
--- @alias {{asUpperCamelCase name}}
---
{{#zcl_bitmap_items}}
--- @field public {{as_underscore_uppercase_lua (as_underscore_uppercase label)}} number {{mask}}
{{/zcl_bitmap_items}}

local {{asUpperCamelCase name}} = {}
local new_mt = UintABC.new_mt({NAME = "{{asUpperCamelCase name}}", ID = data_types.name_to_id_map["{{asSTDataType type}}"]}, {{asSTDataTypeLength type}})

{{asUpperCamelCase name}}.BASE_MASK = 0xFFFF
{{#zcl_bitmap_items}}
{{asUpperCamelCase ../name}}.{{as_underscore_uppercase_lua (as_underscore_uppercase label)}} = {{asHex mask 4}}
{{/zcl_bitmap_items}}

{{asUpperCamelCase name}}.mask_fields = {
  BASE_MASK = 0xFFFF,
{{#zcl_bitmap_items}}
  {{as_underscore_uppercase_lua (as_underscore_uppercase label)}} = {{asHex mask 4}},
{{/zcl_bitmap_items}}
}

{{#zcl_bitmap_items}}
--- @function {{asUpperCamelCase ../name}}:is_{{asSnakeCaseLower label}}_set
--- @return boolean True if the value of {{as_underscore_uppercase_lua (as_underscore_uppercase label)}} is non-zero
{{asUpperCamelCase ../name}}.is_{{asSnakeCaseLower label}}_set = function(self)
  return (self.value & self.{{as_underscore_uppercase_lua (as_underscore_uppercase label)}}) ~= 0
end
 
--- @function {{asUpperCamelCase ../name}}:set_{{asSnakeCaseLower label}}
--- Set the value of the bit in the {{as_underscore_uppercase_lua (as_underscore_uppercase label)}} field to 1
{{asUpperCamelCase ../name}}.set_{{asSnakeCaseLower label}} = function(self)
  if self.value ~= nil then
    self.value = self.value | self.{{as_underscore_uppercase_lua (as_underscore_uppercase label)}}
  else
    self.value = self.{{as_underscore_uppercase_lua (as_underscore_uppercase label)}}
  end
end

--- @function {{asUpperCamelCase ../name}}:unset_{{asSnakeCaseLower label}}
--- Set the value of the bits in the {{as_underscore_uppercase_lua (as_underscore_uppercase label)}} field to 0
{{asUpperCamelCase ../name}}.unset_{{asSnakeCaseLower label}} = function(self)
  self.value = self.value & (~self.{{as_underscore_uppercase_lua (as_underscore_uppercase label)}} & self.BASE_MASK)
end
{{/zcl_bitmap_items}}

{{asUpperCamelCase name}}.mask_methods = {
{{#zcl_bitmap_items}}
  is_{{asSnakeCaseLower label}}_set = {{asUpperCamelCase ../name}}.is_{{asSnakeCaseLower label}}_set,
  set_{{asSnakeCaseLower label}} = {{asUpperCamelCase ../name}}.set_{{asSnakeCaseLower label}},
  unset_{{asSnakeCaseLower label}} = {{asUpperCamelCase ../name}}.unset_{{asSnakeCaseLower label}},
{{/zcl_bitmap_items}}
}

setmetatable({{asUpperCamelCase name}}, new_mt)

return {{asUpperCamelCase name}}

{{/zcl_bitmaps}}
{{/chip_server_clusters}}