{{!-- > header --}}
{{#chip_server_clusters}}
{{#zcl_attributes_server}}
{{#if (isStrEqual name "ClusterRevision")}}
{{else if (isStrEqual name "ServerGeneratedCommandList")}}
{{else if (isStrEqual name "ClientGeneratedCommandList")}}
{{else if (isStrEqual name "AttributeList")}}
{{else if (isStrEqual name "FeatureMap")}}
{{else}}
SOURCE_FILE_PATH=st/matter/generated/zap_clusters/{{asUpperCamelCase ../name}}/server/attributes/{{asUpperCamelCase name}}.lua
-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

{{lua_zap_header}}

local cluster_base = require "st.matter.cluster_base"
{{#if (isStrEqual type "boolean")}}
local data_types = require "st.matter.data_types"
{{else if (isStrEqual type "int16u")}}
local data_types = require "st.matter.data_types"
{{else}}
local data_types = require "st.matter.data_types"
{{/if}}

--- @class st.matter.generated.zap_clusters.{{asUpperCamelCase ../name}}.{{asUpperCamelCase name}}
--- @alias {{asUpperCamelCase name}}
---
--- @field public ID number {{asHex code 4}} the ID of this attribute
--- @field public NAME string "{{asUpperCamelCase name}}" the name of this attribute
--- @field public data_type st.matter.data_types.{{#if (isStrEqual type "int16u")}}{{asSTDataType type}}{{else if (isStrEqual type "boolean")}}{{asSTDataType type}}{{else}}{{#chip_server_clusters}}{{#if (isStrEqual name ../../name)}}{{#zcl_enums}}{{#if (isStrEqual ../../type name)}}{{asSTDataType type}}{{/if}}{{/zcl_enums}}{{/if}}{{/chip_server_clusters}}{{/if}} the data type of this attribute
{{#chip_server_clusters}}
  {{#if (isStrEqual name ../../name)}}
    {{#zcl_enums}}
      {{#if (isStrEqual ../../type name)}}
        {{#zcl_enum_items}}
--- @field public {{as_underscore_uppercase_lua (as_underscore_uppercase name)}} number {{value}}
        {{/zcl_enum_items}}
      {{/if}}
    {{/zcl_enums}}
  {{/if}}
{{/chip_server_clusters}}

local {{asUpperCamelCase name}} = {
  ID = {{asHex code 4}},
  NAME = "{{asUpperCamelCase name}}",
{{#if (isStrEqual type "int16u")}}
  base_type = data_types.{{asSTDataType type}},
{{else if (isStrEqual type "boolean")}}
  base_type = data_types.{{asSTDataType type}},
{{else}}
  {{#chip_server_clusters}}
    {{#if (isStrEqual name ../../name)}}
      {{#zcl_enums}}
        {{#if (isStrEqual ../../type name)}}          
  base_type = data_types.{{asSTDataType type}},
        {{/if}}
      {{/zcl_enums}}
    {{/if}}
  {{/chip_server_clusters}}
{{/if}}
}

{{#chip_server_clusters}}
  {{#if (isStrEqual name ../../name)}}
    {{#zcl_enums}}
      {{#if (isStrEqual ../../type name)}}
        {{#zcl_enum_items}}
{{asUpperCamelCase ../../../name}}.{{as_underscore_uppercase_lua (as_underscore_uppercase name)}} = {{asHex value 2}}
        {{/zcl_enum_items}}
      {{/if}}
    {{/zcl_enums}}
  {{/if}}
{{/chip_server_clusters}}

{{asUpperCamelCase name}}.enum_fields = {
{{#chip_server_clusters}}
  {{#if (isStrEqual name ../../name)}}
    {{#zcl_enums}}
      {{#if (isStrEqual ../../type name)}}
        {{#zcl_enum_items}}
  [{{asUpperCamelCase ../../../name}}.{{as_underscore_uppercase_lua (as_underscore_uppercase name)}}] = "{{as_underscore_uppercase_lua (as_underscore_uppercase name)}}",
        {{/zcl_enum_items}}
      {{/if}}
    {{/zcl_enums}}
  {{/if}}
{{/chip_server_clusters}}
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj st.matter.data_types.{{#if (isStrEqual type "int16u")}}{{asSTDataType type}}{{else if (isStrEqual type "boolean")}}data_types.{{asSTDataType type}}{{else}}{{#chip_server_clusters}}{{#if (isStrEqual name ../../name)}}{{#zcl_enums}}{{#if (isStrEqual ../../type name)}}{{asSTDataType type}}{{/if}}{{/zcl_enums}}{{/if}}{{/chip_server_clusters}}{{/if}} the base data type object to add functionality to
function {{asUpperCamelCase name}}:augment_type(base_type_obj)
  for value, key in pairs(self.enum_fields) do
    base_type_obj[key] = value
  end
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function {{asUpperCamelCase name}}.pretty_print(value_obj)
  return string.format("%s: %s[%s]", value_obj.field_name or value_obj.NAME, {{asUpperCamelCase name}}.NAME, {{asUpperCamelCase name}}.enum_fields[value_obj.value])
end

--- TODO
{{asUpperCamelCase name}}.build_test_attr_report = cluster_base.build_test_attr_report

--- TODO
{{asUpperCamelCase name}}.build_test_read_attr_response = cluster_base.build_test_read_attr_response

--- Create a {{#if (isStrEqual type "int16u")}}{{asSTDataType type}}{{else if (isStrEqual type "boolean")}}data_types.{{asSTDataType type}}{{else}}{{#chip_server_clusters}}{{#if (isStrEqual name ../../name)}}{{#zcl_enums}}{{#if (isStrEqual ../../type name)}}{{asSTDataType type}}{{/if}}{{/zcl_enums}}{{/if}}{{/chip_server_clusters}}{{/if}} object of this attribute with any additional features provided for the attribute
--- This is also usable with the {{asUpperCamelCase name}}(...) syntax
---
--- @vararg vararg the values needed to construct a {{asSTDataType type}}
--- @return st.matter.data_types.{{#if (isStrEqual type "int16u")}}{{asSTDataType type}}{{else if (isStrEqual type "boolean")}}data_types.{{asSTDataType type}}{{else}}{{#chip_server_clusters}}{{#if (isStrEqual name ../../name)}}{{#zcl_enums}}{{#if (isStrEqual ../../type name)}}{{asSTDataType type}}{{/if}}{{/zcl_enums}}{{/if}}{{/chip_server_clusters}}{{/if}}
function {{asUpperCamelCase name}}:new_value(...)
  local o = self.base_type(table.unpack({...}))
  self:augment_type(o)
  return o
end

--- Constructs an st.matter.interaction_model.InteractionRequest to read
--- this attribute from a device
--- @param device st.matter.Device
--- @return st.matter.interaction_model.InteractionRequest containing an Interaction Request
function {{asUpperCamelCase name}}:read(device, endpoint_id)
  return cluster_base.read(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    nil, --event_id
    nil, --list_index
    nil --field_id
  )
end

{{#if isWritable}}
--- Constructs an st.matter.interaction_model.InteractionRequest to write
--- this attribute to a device
---
--- @param device st.matter.Device
--- @param value st.matter.data_types.{{asSTDataType type}} the value to write
function {{asUpperCamelCase name}}:write(device, endpoint_id, value)
  local data = data_types.validate_or_build_type(value, self.base_type)
  self:augment_type(data)
  return cluster_base.write(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    nil, --event_id
    nil, --list_index
    nil, --field_id
    data
  )
end
{{/if}}

--- Reporting policy: {{asUpperCamelCase name}} => {{isReportable}} => {{reportingPolicy}}

{{#if isReportable}}
--- Sets up a Subscribe Interaction, by settig up a Reporting Interval
---
--- @param device any
--- @param min_interval_floor any
--- @param max_interval_floor any
--- @return any
function {{asUpperCamelCase name}}:subscribe(device, min_interval_floor, max_interval_floor)
-- TODO
end
{{/if}}

function {{asUpperCamelCase name}}:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable({{asUpperCamelCase name}}, {__call = {{asUpperCamelCase name}}.new_value})
return {{asUpperCamelCase name}}

{{/if}}
{{/zcl_attributes_server}}
{{/chip_server_clusters}}